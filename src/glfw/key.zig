const c = @cImport({
    @cInclude("GLFW/glfw3.h");
});

pub const Key = enum(c_int) {
    space = c.GLFW_KEY_SPACE,
    apostrophe = c.GLFW_KEY_APOSTROPHE,
    comma = c.GLFW_KEY_COMMA,
    minus = c.GLFW_KEY_MINUS,
    period = c.GLFW_KEY_PERIOD,
    slash = c.GLFW_KEY_SLASH,
    number_0 = c.GLFW_KEY_0,
    number_1 = c.GLFW_KEY_1,
    number_2 = c.GLFW_KEY_2,
    number_3 = c.GLFW_KEY_3,
    number_4 = c.GLFW_KEY_4,
    number_5 = c.GLFW_KEY_5,
    number_6 = c.GLFW_KEY_6,
    number_7 = c.GLFW_KEY_7,
    number_8 = c.GLFW_KEY_8,
    number_9 = c.GLFW_KEY_9,
    semicolon = c.GLFW_KEY_SEMICOLON,
    equal = c.GLFW_KEY_EQUAL,
    a = c.GLFW_KEY_A,
    b = c.GLFW_KEY_B,
    c = c.GLFW_KEY_C,
    d = c.GLFW_KEY_D,
    e = c.GLFW_KEY_E,
    f = c.GLFW_KEY_F,
    g = c.GLFW_KEY_G,
    h = c.GLFW_KEY_H,
    i = c.GLFW_KEY_I,
    j = c.GLFW_KEY_J,
    k = c.GLFW_KEY_K,
    l = c.GLFW_KEY_L,
    m = c.GLFW_KEY_M,
    n = c.GLFW_KEY_N,
    o = c.GLFW_KEY_O,
    p = c.GLFW_KEY_P,
    q = c.GLFW_KEY_Q,
    r = c.GLFW_KEY_R,
    s = c.GLFW_KEY_S,
    t = c.GLFW_KEY_T,
    u = c.GLFW_KEY_U,
    v = c.GLFW_KEY_V,
    w = c.GLFW_KEY_W,
    x = c.GLFW_KEY_X,
    y = c.GLFW_KEY_Y,
    z = c.GLFW_KEY_Z,
    left_bracket = c.GLFW_KEY_LEFT_BRACKET,
    backslash = c.GLFW_KEY_BACKSLASH,
    right_bracket = c.GLFW_KEY_RIGHT_BRACKET,
    grave_accent = c.GLFW_KEY_GRAVE_ACCENT,
    world_1 = c.GLFW_KEY_WORLD_1,
    world_2 = c.GLFW_KEY_WORLD_2,
    escape = c.GLFW_KEY_ESCAPE,
    enter = c.GLFW_KEY_ENTER,
    tab = c.GLFW_KEY_TAB,
    backspace = c.GLFW_KEY_BACKSPACE,
    insert = c.GLFW_KEY_INSERT,
    delete = c.GLFW_KEY_DELETE,
    right = c.GLFW_KEY_RIGHT,
    left = c.GLFW_KEY_LEFT,
    down = c.GLFW_KEY_DOWN,
    up = c.GLFW_KEY_UP,
    page_up = c.GLFW_KEY_PAGE_UP,
    page_down = c.GLFW_KEY_PAGE_DOWN,
    home = c.GLFW_KEY_HOME,
    end = c.GLFW_KEY_END,
    caps_lock = c.GLFW_KEY_CAPS_LOCK,
    scroll_lock = c.GLFW_KEY_SCROLL_LOCK,
    num_lock = c.GLFW_KEY_NUM_LOCK,
    print_screen = c.GLFW_KEY_PRINT_SCREEN,
    pause = c.GLFW_KEY_PAUSE,
    f1 = c.GLFW_KEY_F1,
    f2 = c.GLFW_KEY_F2,
    f3 = c.GLFW_KEY_F3,
    f4 = c.GLFW_KEY_F4,
    f5 = c.GLFW_KEY_F5,
    f6 = c.GLFW_KEY_F6,
    f7 = c.GLFW_KEY_F7,
    f8 = c.GLFW_KEY_F8,
    f9 = c.GLFW_KEY_F9,
    f10 = c.GLFW_KEY_F10,
    f11 = c.GLFW_KEY_F11,
    f12 = c.GLFW_KEY_F12,
    f13 = c.GLFW_KEY_F13,
    f14 = c.GLFW_KEY_F14,
    f15 = c.GLFW_KEY_F15,
    f16 = c.GLFW_KEY_F16,
    f17 = c.GLFW_KEY_F17,
    f18 = c.GLFW_KEY_F18,
    f19 = c.GLFW_KEY_F19,
    f20 = c.GLFW_KEY_F20,
    f21 = c.GLFW_KEY_F21,
    f22 = c.GLFW_KEY_F22,
    f23 = c.GLFW_KEY_F23,
    f24 = c.GLFW_KEY_F24,
    f25 = c.GLFW_KEY_F25,
    kp_0 = c.GLFW_KEY_KP_0,
    kp_1 = c.GLFW_KEY_KP_1,
    kp_2 = c.GLFW_KEY_KP_2,
    kp_3 = c.GLFW_KEY_KP_3,
    kp_4 = c.GLFW_KEY_KP_4,
    kp_5 = c.GLFW_KEY_KP_5,
    kp_6 = c.GLFW_KEY_KP_6,
    kp_7 = c.GLFW_KEY_KP_7,
    kp_8 = c.GLFW_KEY_KP_8,
    kp_9 = c.GLFW_KEY_KP_9,
    kp_decimal = c.GLFW_KEY_KP_DECIMAL,
    kp_divide = c.GLFW_KEY_KP_DIVIDE,
    kp_multiply = c.GLFW_KEY_KP_MULTIPLY,
    kp_subtract = c.GLFW_KEY_KP_SUBTRACT,
    kp_add = c.GLFW_KEY_KP_ADD,
    kp_enter = c.GLFW_KEY_KP_ENTER,
    kp_equal = c.GLFW_KEY_KP_EQUAL,
    left_shift = c.GLFW_KEY_LEFT_SHIFT,
    left_control = c.GLFW_KEY_LEFT_CONTROL,
    left_alt = c.GLFW_KEY_LEFT_ALT,
    left_super = c.GLFW_KEY_LEFT_SUPER,
    right_shift = c.GLFW_KEY_RIGHT_SHIFT,
    right_control = c.GLFW_KEY_RIGHT_CONTROL,
    right_alt = c.GLFW_KEY_RIGHT_ALT,
    right_super = c.GLFW_KEY_RIGHT_SUPER,
    menu = c.GLFW_KEY_MENU,

    unknown = c.GLFW_KEY_UNKNOWN,

    pub const last = c.GLFW_KEY_LAST;
};

pub const Action = enum(c_int) {
    press = c.GLFW_PRESS,
    release = c.GLFW_RELEASE,
    repeat = c.GLFW_REPEAT,
};

pub const Mods = struct {
    shift: bool,
    control: bool,
    alt: bool,
    super: bool,
    caps_lock: bool,
    num_lock: bool,
};

pub fn modsFromInt(mods: c_int) Mods {
    return .{
        .shift = (mods & c.GLFW_MOD_SHIFT) != 0,
        .control = (mods & c.GLFW_MOD_CONTROL) != 0,
        .alt = (mods & c.GLFW_MOD_ALT) != 0,
        .super = (mods & c.GLFW_MOD_SUPER) != 0,
        .caps_lock = (mods & c.GLFW_MOD_CAPS_LOCK) != 0,
        .num_lock = (mods & c.GLFW_MOD_NUM_LOCK) != 0,
    };
}

const std = @import("std");

pub fn getKeyName(key: Key, scancode: c_int) ?[:0]const u8 {
    const name = c.glfwGetKeyName(@intFromEnum(key), scancode) orelse return null;
    return std.mem.sliceTo(name, 0);
}
